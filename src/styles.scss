@use "variables" as *;
// Custom Theming for Angular Material
@use '@angular/material' as mat;

@import "@fontsource/roboto/300.css";
@import "@fontsource/roboto/400.css";
@import "@fontsource/roboto/500.css";

@import 'material-icons/iconfont/filled.css';

@import 'photoswipe/dist/photoswipe.css';

.pswp {
  --pswp-root-z-index: 1000
}

.pswp-video-container {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
}
.pswp-video {
  width: 100%;
  height: 100%;
  &:focus {
    outline: none;
  }
}

.pswp-audio-container {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
}

.pswp-audio {
  width: 80%;
}

.pswp-video-placeholder {
  width: 100%;
  height: 100%;
  object-fit: contain;
}

.pswp-video ~ .pswp-video-placeholder {
  display: none;
}

.pswp-error-text {
  margin-top: 8px;
  text-align: center;
}

.pswp-error-thumb {
  margin-left: auto;
  margin-right: auto;
  display: block;
}

.pswp__button {
  width: 40px;
  .material-icons {
    color: var(--pswp-icon-color);
    text-shadow: 1px 1px 3px var(--pswp-icon-color-secondary);
  }
}

.pswp__button--custom-close {
  //margin-right: 16px;
}

.pswp__counter {
  margin-left: 0px;
}

.pswp__zoom-level {
  height: 30px;
  margin: 15px 0 0 16px;
  font-size: 14px;
  line-height: 30px;
  color: var(--pswp-icon-color);
  text-shadow: 1px 1px 3px var(--pswp-icon-color-secondary);
  opacity: 0.85;
	user-select: none;
}

.pswp__top-bar {
  padding-left: 16px;
  padding-right: 16px;
}

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core($typography-config);

//setting up for future theme options
@mixin app-theming($theme) {
  // Extract the palettes you need from the theme definition.
  $primary: map-get($theme, primary);
  $accent: map-get($theme, accent);

  $foreground: map-get($theme, foreground);

  $background: map-get($theme, background);

  $is-dark: map-get($theme, is-dark);

  @if $is-dark {
    .mat-toolbar.mat-primary {
      background: mat.get-color-from-palette($background, app-bar);
      color: mat.get-color-from-palette($foreground, text);
    }
  }

  // Define any styles affected by the theme.
  .drawer-list-item-active {
    background-color: change-color(mat.get-color-from-palette($primary), $alpha: 0.15) !important;
    color: mat.get-color-from-palette($primary) !important;
    .mat-list-icon {
      color: mat.get-color-from-palette($primary) !important;
    }
  }

  .sidenav-list {
    .mat-list-icon {
      //color: rgba(0, 0, 0, 0.54);
      color: mat.get-color-from-palette($foreground, icon);
      margin-right: 16px;
    }
  }

  .image-grid-supporting-text {
    color: mat.get-color-from-palette($foreground, text) !important;
  }
}

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-legacy-component-themes($light-theme);
@include app-theming($light-theme);

html,
body {
  height: 100%;
}
body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}

@media (prefers-color-scheme: dark) {
  @include mat.all-legacy-component-themes($dark-theme);
  @include app-theming($dark-theme);
}

.main-content {
  margin: auto;
  padding: 24px;
  @media (max-width: 599px) {
    padding: 16px;
  }
  //width: 100%;
  max-width: 1920px;
}

body {
  overscroll-behavior: none;
}

.cdk-overlay-container {
  z-index: 10000 !important;
}

.mat-chip.tag-chip {
  background-color: map-get(
  map-get($mat-tag-colors, "default-namespace"),
  "default"
  );
  color: map-get(
    map-get($mat-tag-colors, "default-namespace"),
    "default-contrast"
  );
  font-weight: 400;
  @each $tag, $palette in $mat-tag-colors {
    &.tag-namespace-#{$tag} {
      background-color: map-get($palette, "default");
      color: map-get($palette, "default-contrast");
    }
  }
  &.tag-namespace- {
    background-color: map-get(
      map-get($mat-tag-colors, "no-namespace"),
      "default"
    );
    color: map-get(
      map-get($mat-tag-colors, "no-namespace"),
      "default-contrast"
    );
  }
  .mat-chip-remove {
    opacity: 0.6;
  }
  height: 100% !important;
}

.tag-color {
  color: map-get(map-get($mat-tag-colors, "default-namespace"), "default");
  //color: map-get(map-get($mat-tag-colors, "default-namespace"), "default-contrast");
  @each $tag, $palette in $mat-tag-colors {
      &.tag-namespace-#{$tag} {
          color: map-get($palette, "default");
          //color: map-get($palette, "default-contrast");
      }
  }
  &.tag-namespace- {
      color: map-get(map-get($mat-tag-colors, "no-namespace"), "default");
      //color: map-get(map-get($mat-tag-colors, "no-namespace"), "default-contrast");
  }
}

.toolbar-count {
  padding-left: 4px;
  padding-right: 4px;
  overflow: hidden;
  text-overflow: ellipsis;
}

.mat-button,
.mat-raised-button,
.mat-stroked-button,
.mat-flat-button {
  text-transform: uppercase;
}

.file-info-panel {
  width: 720px;
  .mat-bottom-sheet-container {
    min-width: min(100vw, 720px);
  }
}


.virtual-scroll-viewport-full-width {
  .cdk-virtual-scroll-content-wrapper {
    width: 100%;
  }
}

.form-field-spacing {
  @extend .mat-form-field-wrapper;
}

.text-ellipsis {
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.tag-chip-text {
  width: calc(100%); // calc is important here, do not use "100%" alone
  overflow: hidden;
  text-overflow: ellipsis;
}

.tag-chip {
  width: fit-content;
  max-width: 100%;
}

.flex-row {
  display: flex;
  flex-direction: row;
}
.flex-column {
  display: flex;
  flex-direction: column;
}
.fxFlex {
  flex: 1 1 0%;
}

.button-row {
  flex-flow: row wrap;
  display: flex;
  place-content: stretch flex-end;
  align-items: stretch;
  gap: 8px;
}
